// BUCLES, BUCLES ANIDADOS E INTRODUCCI√ìN A EFICIENCIA: no todas las soluciones fueron creadas iguales...

// 1) Problema de Gauss: https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/javascript
// üî•
// üî•üî•üî•

// 1 ... 100 => 5050
function summation(num) {
  let sum = 0
  for (let i = 1; i <= num; i++) {
    sum += i // Si queremos sumar valores para reasignar un nuevo valor a "sum" nos servimos del operador +=
  }
  return sum
}
// Seg√∫n cuenta la leyenda, Gauss resolvi√≥ este problema en menos de 1 minuto. La pregunta es: ¬øC√≥mo?
// Si nos damos cuenta, podemos agrupar los numeros del rango 1-100 por parejas de la siguiente manera:
// (1 -- 100) , (2 -- 99), (3 -- 98), (4--97) , etc. Si nos fijamos, cada pareja suma el mismo valor: 101. ¬øCu√°ntas parejas podremos formar en total? En este caso 50 (ya que son 100 n√∫meros => 100/2)
// Expresado en t√©rminos m√°s formales => Podemos formar n/2 (100/2 en el ejemplo) parejas, donde n es el n√∫mero cuyo sumatorio queremos hallar.
// Por otra parte, cada pareja de n√∫meros suma 101. Casualmente, ¬øno es esto igual a n + 1 (100 + 1 en nuestro ejemplo)?
// Luego tenemos, por una parte, el n√∫mero de parejas n/2 y, por otra parte, la suma de cada una de esas parejas (n+1)
// Dicho en humano, si tenemos 50 parejas posibles y cada una suma 101, solo nos queda multiplicar => 50 * 101, que tiene como resultado 5050
// Expresado formalmente: n/2*(n+1):

// Pod√©is comprobar que funciona en codewars: https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/javascript
function summation(num) {
  return (num / 2) * (num + 1) // Esta soluci√≥n es MUCHO m√°s eficiente que la anterior porque no tenemos que recorrer ning√∫n array
}

// 2) Matrices => a veces no queda m√°s remedio que iterar
// find the biggest number üî•üî•/2
const matrix = [
  [0, 255, 1], // 0
  [4, 5, 666], // 1
  [28, 98, 9], // 2
]

// Vamos a desmenuzar este problema en partes!!!:
// En primre lugar, observamos que esta "matriz" no es m√°s que un array de arrays...
// Se nos pide que saquemos el n√∫mero m√°s grande de la matriz. En principio sabemos resolver ese problema para un array simple como: [0, 255, 1]
// Sin embargo, en este caso nos enfrentamos a una estructura un poco m√°s compleja. Pero nuestra estragia es bien simple: si sabemos obtener el n√∫mero m√°s grande una lista simple: [0,255,1],
// ¬øAcaso no podemos separar esta matriz en subproblemas?: Divide and Conquer!!! (Divide y vencer√°s)

function findTheBiggestNumber(matrix) {
  let biggestNumber = 0 // Creamos una variable para poder guardar en memoria el dato del n√∫mero m√°s grande.
  for (let i = 0; i < matrix.length; i++) {
    // Creamos un bucle normal y corriente. Cada √≠ndice i nos va a permitir acceder a un elemento de la matriz:  [0, 255, 1], [4, 5, 666], [28, 98, 9]
    const element = matrix[i] // matrix[i] en cada vuelta del bucle va a ser igual a cada array de n√∫meros: [0,255,1], [4, 5, 666] y finalmente [28, 98, 9]
    // ¬°Estamos a punto de resolver el problema! Si os fij√°is, element es en cada caso una lista de n√∫meros: ¬°Este problema ya sabemos resolverlo!
    for (let j = 0; j < element.length; j++) {
      // Iteramos sobre cada uno de los elementos de esta lista y comparamos: Primer elemento (√≠ndices i: 0, j: 0) => 0, ¬øEs mayor que el valor de nuestra variable inicial? (0) Nope.
      // Este bucle es una estructura ANIDADA dentro del bucle externo, luego por cada vuelta que d√© el primero, este se ejecuta 3 veces.
      if (element[j] > biggestNumber) biggestNumber = element[j]
    }
  }
  // Cuando terminamos el bucle externo, ya hemos recorrido todos los n√∫meros de la matriz y biggestNumber ser√° el n√∫mero m√°s grande que hayamos analizado.
  return biggestNumber
}

// 3) How many tiiiiiimes:
// üî•üî•
const brands = [
  "Uniqlo",
  "Bershka", // Bershka
  "Bershka", // Bershka
  "Zara",
  "H&M",
  "Guchi",
  "Naike",
  "Bershka", // Bershka
]

function getBrandRepeatedTimes(brands, singleBrand) {
  let count = 0
  for (let brand of brands) {
    if (brand === singleBrand) count++
  }
  return count
}

// 4 EFICIENCIA... ==> checkfortarget...
// ENUNCIADO:
// numbers = [2,7,11,15], target = 13,
// [2,7,11,15]
//üî•üî•üî•

// https://leetcode.com/problems/two-sum/
var twoSum = function (nums, target) {
  const includedNumbers = {}

  for (let i = 0; i < nums.length; i++) {
    const missingNumber = target - nums[i]
    if (missingNumber in includedNumbers)
      return [includedNumbers[missingNumber], i]
    includedNumbers[nums[i]] = i
  }
}

// 5 CAN U GUESS MY NUMBER? BINARY SEARCH
// üî•
// ü•∏ü•∏ü•∏

// Ejemplo => [3, 7, 12, 16, 20, 24, 28, 33, 37, 41, 45, 50, 55, 60, 65] , 55 // boolean => true, false

// Dado un array de n√∫meros y un n√∫mero "target", tenemos que devolver si target est√° incluido en nuestra lista de n√∫meros
// function guessNumber(numbers, target) {
//   // EL enfoque m√°s intuitivo es iterar sobre nuestro array y comprobar si a cada paso, al iterar sobre nuestro array, el elemento que estemos analizando es target.
//   for (let i = 0; i < numbers.length; i++) {
//     // Vamos comparando: 3 === 55 ??? Nope , 7 === 55 ??? Nope... Hasta llegar a 55 === 55.
//     if (numbers[i] === target) return true
//   }
//   return false
// }

function guessNumber(numbers, target) {
  return numbers.includes(target)
}

guessNumber([3, 7, 12, 16, 20, 24, 28, 33, 37, 41, 45, 50, 55, 60, 65], 55)

// SOLUCI√ìN AVANZADA (SUPER CHULA üî•üî•üî•üî•üî•).
// LEED esto SOLO si comprend√©is el 100% de lo que hemos visto. ü•∏
// ESTO ES CURIOSIDAD MALSANA (se me calienta el hocico y tengo que explicarlo al menos). Esta t√©cnica se utiliza a nivel de entrevistas t√©cnicas de empresas FAANG (Facebook,Amazon, Apple, Netflix, Google)

// Si os dais cuenta, nuestra lista de n√∫meros est√° ordenada de menor a mayor.
// En la vida, real, si jug√°semos a este juego, para adivinar el n√∫mero en el que est√° pensando alguien, no contar√≠amos del 1 al 100...
// Pensad qu√© pasar√≠a si nuestro juego fuera del 1 al 1.000.000.000.000 ... Nos pasar√≠amos la vida contando.
// En estos casos pensamos en un enfoque m√°s eficiente. En el caso de este problema, dicho enfoque se conoce como "Binary Search" o B√∫squeda Binaria en el mundo de Algoritmia.

// function guessNumber(numbers, target) {
//   // La idea de este enfoque es reducir nuestra muestra a la mitad a cada iteraci√≥n.
//   // En el caso del rango 1... 100, empezar√≠amos partiendo del 50 y haciendo la pregunta: ¬øEs el n√∫mero que est√°s pensando mayor o menor que 50?
//   let left = 0
//   let right = numbers.length - 1
//   // Creamos dos punteros, el puntero izquierdo apunta al primer √≠ndice, y el segundo al √∫ltimo...
//   // De esta forma, podemos siempre apuntar a la mitad => El √≠ndice intermedio entre left y right...

//   while (left <= right) {
//     const mid = Math.floor((left + right) / 2) // Ejemplo: inicialmente left en nuestro ejemplo es 0, right es 14, mid es 7 => que apunta al elemento intermedio: 33

//     if (numbers[mid] === target) {
//       return true
//     } // Igual que en nuestro juego, nos preguntamos si el n√∫mero de en medio en nuestro rango es el objetivo. Si lo es, entonces hemos adivinado el n√∫mero y el juego se detiene
//     else if (numbers[mid] > target) right = mid - 1
//     // Si el n√∫mero a adivinar es menor, entonces reducimos el rango a la mitad izquierda...
//     // Sabiendo esto, podemos reducir el rango de n√∫meros a la mitad...
//     // Ejemplo con el juego del 1 al 100 => Estoy pensando en el n√∫mero 25. Empiezo por la mitad, el 50.
//     // Como 25 es menor a 50, tengo que quedarme con la muestra => [1, ... 49]
//     else {
//       left = mid + 1 // Si nuestro objetivo fuera mayor, tendr√≠amos que quedarnos con la muestra de la derecha: [51, .... 100]
//     }
//   }
//   return false // Finalmente, si el n√∫mero no se encuentra en el rango definido retornamos false...
// }

// Pod√©is comprobar la soluci√≥n aqu√≠: https://leetcode.com/problems/binary-search/submissions/
// En este caso particular nos preguntar por los √≠ndices as√≠ que la soluci√≥n ser√≠a esta:

var search = function (nums, target) {
  // En leetcode utilizand "var" para declarar funciones... Sin m√°s, igual que si hici√©ramos function search() {}
  let left = 0
  let right = nums.length - 1

  while (left <= right) {
    const mid = Math.floor((left + right) / 2)
    if (nums[mid] === target) return mid
    else if (nums[mid] > target) right = mid - 1
    else left = mid + 1
  }
  return -1
}
